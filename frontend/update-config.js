const fs = require('fs');
const path = require('path');

/**
 * Update the frontend configuration with Terraform outputs
 * Usage: node update-config.js <terraform-output-file> [region]
 */

function updateConfig() {
  const args = process.argv.slice(2);
  
  if (args.length < 1) {
    console.error('Usage: node update-config.js <terraform-output-file> [region]');
    process.exit(1);
  }
  
  const terraformOutputFile = args[0];
  const region = args[1] || 'us-west-2';
  
  // Check if terraform output file exists
  if (!fs.existsSync(terraformOutputFile)) {
    console.error(`Terraform output file not found: ${terraformOutputFile}`);
    console.log('Please run: terraform output -json > terraform-output.json');
    process.exit(1);
  }
  
  try {
    // Read terraform outputs
    const terraformOutputs = JSON.parse(fs.readFileSync(terraformOutputFile, 'utf8'));
    
    // Extract required values
    const agentId = terraformOutputs.agent_id?.value;
    const agentAliasId = terraformOutputs.agent_alias_id?.value || 'TSTALIASID';
    const identityPoolId = terraformOutputs.cognito_identity_pool_id?.value;
    const userPoolId = terraformOutputs.cognito_user_pool_id?.value;
    const userPoolClientId = terraformOutputs.cognito_user_pool_client_id?.value;
    const appConfig = terraformOutputs.app_config?.value || {};
    
    if (!agentId) {
      console.error('agent_id not found in terraform outputs');
      process.exit(1);
    }
    
    if (!identityPoolId) {
      console.error('cognito_identity_pool_id not found in terraform outputs');
      process.exit(1);
    }
    
    if (!userPoolId) {
      console.error('cognito_user_pool_id not found in terraform outputs');
      process.exit(1);
    }
    
    if (!userPoolClientId) {
      console.error('cognito_user_pool_client_id not found in terraform outputs');
      process.exit(1);
    }
    
    // Create config content
    const configContent = `// Configuration for Bedrock Agent Chatbot
// This file is auto-generated by update-config.js
const config = {
  aws: {
    region: '${region}',
    identityPoolId: '${identityPoolId}',
  },
  cognito: {
    userPoolId: '${userPoolId}',
    userPoolClientId: '${userPoolClientId}',
  },
  bedrock: {
    agentId: '${agentId}',
    agentAliasId: '${agentAliasId}',
  },
  app: {
    title: '${appConfig.title || 'Bedrock Agent Chatbot'}',
    description: '${appConfig.description || 'AI-powered chatbot using Amazon Bedrock Agent'}',
    loginSubtitle: '${appConfig.loginSubtitle || 'Sign in to start chatting with our AI assistant'}',
    inputPlaceholder: '${appConfig.inputPlaceholder || 'Ask me anything... (Shift+Enter for new line)'}',
    tips: '${appConfig.tips || 'Ask questions to get helpful responses'}',
    shortcuts: '${appConfig.shortcuts || 'Enter to send ‚Ä¢ Shift+Enter for new line'}'
  }
};

export default config;`;
    
    // Write config file
    const configPath = path.join(__dirname, 'src', 'config.js');
    fs.writeFileSync(configPath, configContent);
    
    console.log('‚úÖ Configuration updated successfully!');
    console.log(`Agent ID: ${agentId}`);
    console.log(`Agent Alias ID: ${agentAliasId}`);
    console.log(`Region: ${region}`);
    console.log(`Identity Pool ID: ${identityPoolId}`);
    console.log(`User Pool ID: ${userPoolId}`);
    console.log(`User Pool Client ID: ${userPoolClientId}`);
    console.log('');
    console.log('üîê Authentication is now configured with Cognito User Pool!');
    
  } catch (error) {
    console.error('Error updating configuration:', error.message);
    process.exit(1);
  }
}

updateConfig();
